import cv2
import numpy as np


def object_position_in_ground_frame(robot_centroid, robot_direction, vect_detection):
    '''
    @brief   Converts the detected object coordinates from the robot's reference frame to the ground reference frame.
 
    @param   robot_centroid         -> List representing the centroid coordinates of the robot
             robot_direction       -> Tuple representing the direction vector coordinates of the robot
             vect_detection -> List representing the coordinates of the detected object in the robot's reference frame
    
    @return  object_ground_coords  -> List representing the coordinates of the detected object in the ground reference frame
    '''
    
    # Convert robot direction to unit vector
    robot_direction_unit = robot_direction / np.linalg.norm(robot_direction)
    
    # Calculate the vector from the robot centroid to the detected object in the robot's reference frame
    object_vector_robot_frame = np.array(detected_object_coords)
    
    # Transform the vector to the ground reference frame
    object_vector_ground_frame = object_vector_robot_frame.dot([[robot_direction_unit[0], -robot_direction_unit[1]], 
                                                                [robot_direction_unit[1], robot_direction_unit[0]]])
    
    # Calculate the coordinates of the detected object in the ground reference frame
    object_ground_coords = robot_centroid + object_vector_ground_frame
    
    return object_ground_coords


# Example usage:
robot_centroid = np.array([100, 100])  # Example centroid of the robot
robot_direction = np.array([1, 0])  # Example direction vector of the robot
vect_detection = [[17, 17], [19, 10], [21, 0], [19, -10], [17, -17]]  # Example detected object coordinates in the robot's reference frame

object_ground_coords = object_position_in_ground_frame(robot_centroid, robot_direction, detected_object_coords_robot_frame)

print("Object coordinates in ground reference frame:", object_ground_coords)
